{"version":3,"sources":["App.js","helper.js","serviceWorker.js","index.js"],"names":["Helper","domain","re","RegExp","match","sub_domain","url","is_valid","App","useState","path","setPath","error","setError","custom","setCustom","setDomain","setSub","complete","setComplete","linkedin","setLinkedIn","useForm","register","handleSubmit","updateHtml","e","name","target","value","useEffect","length","is_valid_domain","is_valid_sub","is_valid_linkedin","onSubmit","data","a","req","method","headers","body","JSON","stringify","fetch","response","json","success","className","id","ref","type","placeholder","onChange","autoComplete","onClick","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5835891e.chunk.js","sourcesContent":["/*\n\n\thttps://react-hook-form.com/\n\n*/\n\nimport { useForm } from 'react-hook-form';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport helper from './helper.js';\n\nvar Helper = new helper();\n\nfunction App() {\n\n\tconst [ path, setPath ]          = useState('');\n\tconst [ error, setError ]        = useState('');\n\tconst [ custom, setCustom ]      = useState(false);\n\tconst [ domain, setDomain ]      = useState('');\n\tconst [ submit, setSubmit ]      = useState(false);\n\tconst [ sub_domain, setSub ]     = useState('');\n\tconst [ complete, setComplete ]  = useState(false);\n\tconst [ linkedin, setLinkedIn ]  = useState('');\n\tconst { register, handleSubmit } = useForm();\n\n\tlet ip_addr = '116.203.76.21';\n\n\tuseEffect( () => {\n\n\t\tsetError('');\n\n\t\tif ( domain.length && !Helper.is_valid_domain( domain ) ) { \n\t\t\tsetError( 'The domain must follow normal format like example.com' );\n\t\t} \n\n\t\tif ( sub_domain.length && !Helper.is_valid_sub( sub_domain ) ) { \n\t\t\tsetError( 'The sub-domain must be only alphanumeric' );\n\t\t} \n\n\t\tif ( path.length && !Helper.is_valid_sub( path ) ) { \n\t\t\tsetError( 'The name must be only alphanumeric' );\n\t\t} \n\n\t\tif ( linkedin.length && !Helper.is_valid_linkedin( linkedin ) ) { \n\t\t\tsetError( 'Only valid linked in urls e.g. linkedin.com allowed' );\n\t\t}\n\n\t}, [ sub_domain, domain, path, linkedin ] );\n\n\tfunction resetState() { \n\t\tsetSub('');\n\t\tsetPath('');\n\t\tsetError('');\n\t\tsetDomain('');\n\t\tsetLinkedIn('');\n\t}\n\n\tfunction updateHtml( e ) {\n\t\tvar name  = e.target.name;\n\t\tvar value = e.target.value;\n\n\t\tif ( name === 'path' ) {\n\t\t\tsetPath( value );\n\t\t} \n\n\t\tif ( name === 'sub_domain' ) {\n\t\t\tsetSub( value );\n\t\t}\n\t\t\n\t\tif ( name === 'domain' ) { \n\t\t\tsetDomain( value );\n\t\t}\n\t\t\n\t\tif ( name === 'linkedin_url' ) { \n\t\t\tsetLinkedIn( value );\n\t\t}\n\t}\n\n\t// Custom input that syncs with state. \n\tfunction custFields() { \n\t\treturn (\n\t\t\t<>\n\t\t\t\t<h6>DNS:</h6>&nbsp;&nbsp;http://{sub_domain ? sub_domain : 'the-name'}.{domain ? domain : 'example.com'}\n\t\t\t\t<input ref={register()} type=\"hidden\" name=\"form-name\" value=\"custom\" />\n\t\t\t\t<div><input className=\"form-control input-lg\" ref={register()} value={sub_domain} type=\"text\" name=\"sub_domain\" placeholder=\"the-name\" onChange={updateHtml} autoComplete=\"off\" /></div>\n\t\t\t\t<div><input className=\"form-control input-lg\" ref={register()} value={domain} type=\"text\" name=\"domain\" placeholder=\"example.com\" onChange={updateHtml} autoComplete=\"off\" /></div>\n\t\t\t</>\n\t\t);\n\t}\n\n\t// Basic input that syncs with state. \n\tfunction basicFields() { \n\t\treturn ( \n\t\t\t<>\n\t\t\t\t<h6>Short URL:</h6>&nbsp;&nbsp;http://lktd.in/{path ? path : 'the-name'}\n\t\t\t\t<input ref={register()} type=\"hidden\" name=\"form-name\" value=\"default\" />\n\t\t\t\t<div><input className=\"form-control input-lg\" ref={register()} value={path} type=\"text\" name=\"path\" placeholder=\"the-name\" onChange={updateHtml} autoComplete=\"off\" /></div>\n\t\t\t</>\n\t\t);\n\t}\n\n\t// Send JSON to the server.\n\tconst onSubmit = async( data ) => { \n\t\t\n\t\tconst req = { \n\t\t\tmethod: 'POST',\n\t\t\theaders: { 'Content-Type': 'application/json'  },\n\t\t\tbody: JSON.stringify( data )\n\t\t};\n\n\t\tlet response = await fetch( '/save', req );\n\t\tresponse     = await response.json();\n\n\t\tif ( response.error ) { \n\t\t\tsetError( response.error );\n\t\t} else if ( response.success ) { \n\t\t\tsetComplete( true );\n\t\t}\n\t}\n\n\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-md-12\">\n\t\t\t\t\t\t<div className={`${complete ? \"show\" : \"hide\"}`}>\n\t\t\t\t\t\t\t<center>\n\t\t\t\t\t\t\t\t{path  && <h5>http://lktd.in/{path}</h5>}\n\t\t\t\t\t\t\t\t{!path && <h5>http://{sub_domain}.{domain}</h5>}\n\t\t\t\t\t\t\t\t<h5>Goes to:</h5>\n\t\t\t\t\t\t\t\t<h5>{linkedin}</h5>\n\t\t\t\t\t\t\t</center>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<form id='form' className={`${complete ? \"hide\" : \"show\"}`} onSubmit={ handleSubmit( onSubmit ) }>\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t{!custom && <h3>Create a Linked in <u>short link</u> with a provided domain.</h3>}\n\t\t\t\t\t\t\t\t{custom  && <h3>In your DNS provider settings, add a new \"A record\" pointing to <u>{ip_addr}</u></h3>}\n\t\t\t\t\t\t\t\t{custom  && custFields()}\n\t\t\t\t\t\t\t\t{!custom && basicFields()}\n\t\t\t\t\t\t\t\t<input className=\"form-control input-lg\" ref={register()} type=\"text\" name=\"linkedin_url\" value={linkedin} onChange={updateHtml} placeholder=\"linkedin profile url\" autoComplete=\"off\" /><br />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<table className=\"btn-table\">\n\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<td><button className={`btn ${custom ? \"btn-primary\" : \"btn-success\"}`} type=\"button\" onClick={ ( e ) => setCustom( false ) }>Basic</button></td>\n\t\t\t\t\t\t\t\t\t\t<td><button className={`btn ${custom ? \"btn-success\" : \"btn-primary\"}`} type=\"button\" onClick={ ( e ) => setCustom( true ) }>Custom</button></td>\n\t\t\t\t\t\t\t\t\t\t<td><button className=\"btn btn-warning\" type=\"button\" onClick={ () => resetState() }>Reset</button></td>\n\t\t\t\t\t\t\t\t\t\t<td><button className=\"btn btn-danger\" type=\"submit\">Submit</button></td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t<div className=\"col-md-12\">\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t{error && <div className=\"error\" id='error'>{error}</div>}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t);\n}\n\nexport default App;\n","'use strict';\n\nexport default class helper { \n\n\t// Valid custom domain.\n\tis_valid_domain( domain ) { \n\t\tlet re = new RegExp(/^((?:(?:(?:\\w[\\.\\-\\+]?)*)\\w)+)((?:(?:(?:\\w[\\.\\-\\+]?){0,62})\\w)+)\\.(\\w{2,6})$/); \n    \treturn domain.match( re );\n\t} \n\n\tis_valid_sub( sub_domain ) { \n\t\tlet re = new RegExp(/^[0-9a-z-]+$/i); \n    \treturn sub_domain.match( re );\n\t}\n\n\t// Support linked in domains. \n\tis_valid_linkedin( url ) { \n\n\t\tlet is_valid = 0;\n\t\t\n\t\tif ( url.match( /linkedin\\.com/ ) ) {\n\t\t\tis_valid = 1;\n\t\t}\n\n\t\treturn is_valid;\n\t}\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}